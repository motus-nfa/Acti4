function Interval2DayResult

%Til aggregering af RES-fil fra batch kørsel med analyseresultater for alle tidsintervaller
%til 'per day' værdier (1inje pr. ID).
%Det forudsættes at analysen er døgnopdelt dvs. at der i analyseopsætningen
%er valgt 'Separate periods in days', men iøvrigt at intervallerne A1,
%A2,... har betydning som ved default valg.

%Der vælges en output file fra batch kørsel, dernæst vælges parametre og ID som
%skal inkluderes og typen af aggregering (summation/midling af intervaller), som har en
%'Detailed' eller 'Simplified' version:
%
%'Detailed' version er basret på dokumentet T:\Objektive målinger\Metode\Acti4\CriteriaExtractDayResults.docx (NGU)
%og har flg valgmuligheder:
%   A: Whole day (awake)
%   W: Work
%   LonW: Leisure on work days
%   LonA: Leisure all days
%   WaL: Work AND leisure
%   WoL: Work OR Leisure
%   B: Time in bed
%
%Herefter vælges så mellem kravene 4/10 timer eller 75% af genemsnitlig måletid.
%
%'Simplified' version har valgmulighederne:
%   A: Whole day (awake)
%   W: Work
%   LonW: Leisure on work days
%   LonA: Leisure all days
%   B: Time in Bed
%
%Der benyttes samme summation/midlings metode inden for de enkelte dage som ved 'Detailed',
%men ved midling over dagene benyttes generelt tidsvægtet gennemsnit (og intet
%4/10 timer eller 75% minimumskrav.)

%Accelerometer data beregnes i Interval2DayResult_ACCpart.m 
%og evt. HR data i Interval2DayResult_HRpart.m

[Navn,Sti] = uigetfile('*.txt','Select interval output file from final batch run');
if isnumeric(Navn), return, end
Fil = fullfile(Sti,Navn);
Fid = fopen(Fil);
ResColNames = textscan(fgetl(Fid),'%s','delimiter',','); %variabelnavne i resutatfil
ResColNames = ResColNames{1}';

%Læs kolonnenavne og formater fra ParameterList.xlsx:
[~,~,R] = xlsread(fullfile(fileparts(which('Acti4')),'ParameterList.xlsx'),'List');
c = cellfun(@ischar,R(1:5,:)); %Første 5 rækker indeholder (på skift) kolonnenavnene 
ListColNames = [R(1,c(1,:)),R(2,c(2,:)),R(3,c(3,:)),R(4,c(4,:)),R(5,c(5,:))];

%Indlæsningsformat bestemmes for de ResColNames, der findes i ListColNames: 
Formats = cell(length(ResColNames),1);
for i=1:length(ResColNames)
    j = find(strcmp(ResColNames(i),ListColNames));
    if isempty(j)
       Formats{i} = '%*f'; %findes ikke i ListColNames og skal overspringes ved indlæsning
       ResColNames{i} = 'Fjernes';
    else
       Formats{i} = R{8,j};
    end
end

FormatsRead = strrep(Formats,'%d','%f'); %for at kunne læse  NaNs (%d giver 0 for NaN) 17/6-19 
Raw = textscan(Fid, cell2mat(FormatsRead'),'delimiter',','); %data fra udgåede parametre overspringes 
fclose(Fid);

Formats = Formats(~strcmp('Fjernes',ResColNames)); %skal bruges ved gemning af resultater
ResColNames = ResColNames(~strcmp('Fjernes',ResColNames)); %ResColNames opdateres til match med Raw

Kat = FunKat;
ExcludeNames = {'LbNr','Type','Weekday','Start','Stop','Workday','Time','AHTime'}; %Indgår ikke i normal "summeringsprocedure"
ParNames = setdiff(ResColNames,ExcludeNames,'stable'); %De parametre der nu kan vælges blandt.
Parselect = listdlg('ListString',ParNames,'PromptString','Select parameters to process'); 
if isempty(Parselect), return, end
Params = ParNames(Parselect);

%Check om Raw indeholder døgnopdelte intervaller:
aux = datenum(Raw{4}(1:min(100,length(Raw{4}))),'dd/mm/yyyy/HH:MM:SS');
if sum(abs(aux-fix(aux))<.0001) <5 %er der under 5 kl. 00:00 starttider blandt de første 100
   warndlg([Navn,' does not seem to contain intervals separated into days!'])  
end

IDs = unique(Raw{1});
IDselect = listdlg('ListString',IDs,'PromptString','Select IDs');
if isempty(IDselect), return, end
IDs = IDs(IDselect);

MethodDS = questdlg('Select method','','Detailed','Simplified','Cancel','Detailed'); 
if strcmp(MethodDS,'Cancel'), return, end
Crit = '';
if strcmp(MethodDS,'Detailed')
   SumMetode = {'A: Whole day (awake)','A';...
                'W: Work','W';...
                'LonW: Leisure on work days','LonW';...
                'LonA: Leisure all days','LonA';...
                'WaL: Work AND Leisure','WaL';...
                'WoL: Work OR Leisure','WoL';...
                'B: Time in Bed','B'};
   Metodeselect = listdlg('ListString',SumMetode(:,1),'PromptString',{'Detailed procedure:';'Select intervals for summation'},'SelectionMode','single','ListSize',[200 100]); 
   if isempty(Metodeselect), return, end
   SumMethod = SumMetode{Metodeselect,2};

   if ~strcmp(SumMethod,'B')
      Ans = questdlg('Select minimum duration criterion for selection of measurement intervals','Duration criterion','"4/10 hours" OR "75% of average measured time"',...
                     '"4/10 hours" AND "75% of average measured time"','"4/10 hours" OR "75% of average measured time"');
      if isempty(Ans), return, end
      if isempty(strfind(Ans,'AND')), Crit = '|'; end
      if isempty(strfind(Ans,'OR')), Crit = '&'; end
   end
end

if strcmp(MethodDS,'Simplified')
   SumMetode = {'A: Whole day (awake)','A';...
                'W: Work','W';...
                'LonW: Leisure on work days','LonW';...
                'LonA: Leisure all days','LonA';...
                'B: Time in Bed','B'};
   Metodeselect = listdlg('ListString',SumMetode(:,1),'PromptString',{'Simplified procedure:';'Select intervals for summation'},'SelectionMode','single','ListSize',[175 100]); 
   if isempty(Metodeselect), return, end
   SumMethod = SumMetode{Metodeselect,2};
end

%Intervalspecifikation, Type: kun de første 2 karakterer
Type = unique(cellfun(@(x) x(1:2),Raw{2},'UniformOutput',false))';

Days = fix(datenum(Raw{4},'dd/mm/yyyy/HH:MM:SS'));
Hours = Raw{7} - Raw{strcmp('ThighOff',ResColNames)}; %reel måletid

HRfirst = find(strcmp('AHTime',Kat(:,3))); %AHTime must be the first of HR family parameters
ParamsACC = Params(ismember(Params,Kat(1:HRfirst-1,3)));
ParamsHR = Params(ismember(Params,Kat(HRfirst:end,3)));

S = struct('LbNr',IDs);

S = Interval2DayResult_ACCpart(ResColNames,Raw,Kat,ParamsACC,IDs,Type,Days,Hours,SumMethod,S,Crit,MethodDS);
if ~isempty(ParamsHR) % hvis der er HR data inkluderet:
   S = Interval2DayResult_HRpart(ResColNames,Raw,Kat,ParamsHR,IDs,Type,Days,SumMethod,S,Crit,MethodDS);
end

%Udskrivning af resultater:
FieldNames = fieldnames(S);
Form = cell(size(FieldNames)); %til printformaterne for de aktuelle FieldNames
Form(1:3) = {'%s';'%d';'%8.5f'}; %LbNr, Ndays, Tavg
Ekstra = {'Ndays','Tavg','THRavg';'%d','%8.5f','%8.5f'};

if strcmp(Crit,'&'), IntCriterion = 'AND'; end
if strcmp(Crit,'|'), IntCriterion = 'OR'; end
if isempty(Crit), IntCriterion = ''; end
 
if strcmp(MethodDS,'Detailed')
   if ~strcmp(SumMethod,'B') 
      [SaveName,SavePath] = uiputfile('.txt','Specify file for saving per day results',[Fil(1:end-4),'_Detail_',SumMethod,'_',IntCriterion]);
   else
      [SaveName,SavePath] = uiputfile('.txt','Specify file for saving per day results',[Fil(1:end-4),'_Detail_',SumMethod]); 
   end
end
if strcmp(MethodDS,'Simplified')
   [SaveName,SavePath] = uiputfile('.txt','Specify file for saving per day results',[Fil(1:end-4),'_Simple_',SumMethod]);
end

if isnumeric(SaveName), return, end
Fid = fopen(fullfile(SavePath,SaveName),'w');
%parameternavne printes:
fprintf(Fid,[FieldNames{1},', ']); %LbNr
for j = 2:size(FieldNames,1)
     fprintf(Fid,[FieldNames{j},'_',SumMethod,', ']); %A, W, L eller WL påhægtes
     Iekstra = find(strcmp(FieldNames{j},Ekstra(1,:)),1);
    if isempty(Iekstra)
       Form{j} = Formats{strcmp(FieldNames{j},ResColNames)}; %finder det aktuelle format
    else
       Form{j} = Ekstra{2,Iekstra}; 
    end
end
fprintf(Fid,'\n');
%værdier printes:
for i=1:length(S)
    for j=1:size(FieldNames)
        if strcmp(Form{j},'%d')
           fprintf(Fid,[Form{j},','],round(S(i).(FieldNames{j}))); 
        else
           fprintf(Fid,[Form{j},','],S(i).(FieldNames{j})); 
        end
    end
    fprintf(Fid,'\n');
end
fclose(Fid);


function Kat = FunKat
%Opstilling af tabel (Kat) for "summeringsmetode"

%Kolonne 1: Bruges ved samling af identiske intervaltyper den samme dag.
%1: simpel summering
%2: simpel middelværdi
%4: tidsvægtet middelværdi
%5: maksimum
%6: minimum
%10: tidsvægtet middel af HR data

%Kolonne 2: Til beregning af gennemsnitsdag ("per dag"). Der kan være flere intervaller samme dag.
%2: summering over intervaller, dernæst simpel middelværdi over dage
%3: simpel middelværdi over alle intervaller og dage
%4: tidsvægtet middelværdi over alle intervaller og dage
%7: maksimum over alle intervaller, dernæst middel over dage
%8: minimum over intervaller, dernæst middel over dage
%10: tidsvægtet middel af HR data

HRR = cell(100,3);
for i=1:100
   HRR(i,1:3) = {1,2,['HRR_',num2str(i)]}; %hhv. kategori 1 og 3
end

kat = {...
1,	2,	'Time';...
1,	2,	'HipOff';...
1,	2,	'HipTrunkOffLS';...
2,	3,	'VrefThighAP';...
2,	3,	'VrefThighLat';...
1,	2,	'ThighOff';...
1,	2,	'lie';...
1,	2,	'sit';...
1,	2,	'stand';...
1,	2,	'move';...
1,	2,	'walk';...
1,	2,	'run';...
1,	2,	'stairs';...
1,	2,	'cycle';...
1,	2,	'row';...
1,  2,  'sleep';...
1,	2,	'Steps';...
1,	2,	'WalkSlow';...
1,	2,	'WalkFast';...
5,	2,	'Sit_Tmax';...
4,	4,	'Sit_P50';...
1,	2,	'Sit_T50';...
4,	4,	'Sit_P10';...
4,	4,	'Sit_P90';...
1,	2,	'Sit_T30min';...
1,	2,	'Sit_N30min';...
1,	2,	'NriseSit';...
5,	2,	'SitLie_Tmax';...
4,	4,	'SitLie_P50';...
1,	2,	'SitLie_T50';...
4,	4,	'SitLie_P10';...
4,	4,	'SitLie_P90';...
1,	2,	'SitLie_T30min';...
1,	2,	'SitLie_N30min';...
1,	2,	'NriseSitLie';...
5,	2,	'Stand_Tmax';...
5,	2,	'StandMove_Tmax';...
1,	2,	'ArmOff';...
1,	2,	'IncArm30';...
1,	2,	'IncArm60';...
1,	2,	'IncArm90';...
1,	2,	'IncArm120';...
1,	2,	'IncArm150';...
5,	2,	'IncArmMax90';...
1,	2,	'IncArmSit30';...
1,	2,	'IncArmSit60';...
1,	2,	'IncArmSit90';...
1,	2,	'IncArmSit120';...
1,	2,	'IncArmSit150';...
5,	2,	'IncArmSitMax90';...
1,	2,	'IncArmStandMove30';...
1,	2,	'IncArmStandMove60';...
1,	2,	'IncArmStandMove90';...
1,	2,	'IncArmStandMove120';...
1,	2,	'IncArmStandMove150';...
5,	2,	'IncArmStandMoveMax90';...
1,	2,	'IncArmUpright30';...
1,	2,	'IncArmUpright60';...
1,	2,	'IncArmUpright90';...
1,	2,	'IncArmUpright120';...
1,	2,	'IncArmUpright150';...
5,	2,	'IncArmUprightMax90';...
4,	4,	'IncArmPrctile10';...
4,	4,	'IncArmPrctile50';...
4,	4,	'IncArmPrctile90';...
2,	3,	'VrefTrunkAP';...
2,	3,	'VrefTrunkLat';...
1,	2,	'TrunkOff';...
1,	2,	'ForwIncTrunk20';...
1,	2,	'ForwIncTrunk30';...
1,	2,	'ForwIncTrunk60';...
1,	2,	'ForwIncTrunk90';...
5,	2,	'ForwIncTrunkMax60';...
1,	2,	'ForwIncTrunkSit20';...
1,	2,	'ForwIncTrunkSit30';...
1,	2,	'ForwIncTrunkSit60';...
1,	2,	'ForwIncTrunkSit90';...
5,	2,	'ForwIncTrunkSitMax60';...
1,	2,	'ForwIncTrunkStandMove20';...
1,	2,	'ForwIncTrunkStandMove30';...
1,	2,	'ForwIncTrunkStandMove60';...
1,	2,	'ForwIncTrunkStandMove90';...
5,	2,	'ForwIncTrunkStandMoveMax60';...
1,	2,	'ForwIncTrunkUpright20';...
1,	2,	'ForwIncTrunkUpright30';...
1,	2,	'ForwIncTrunkUpright60';...
1,	2,	'ForwIncTrunkUpright90';...
5,	2,	'ForwIncTrunkUprightMax60';...
4,	3,	'IncTrunkWalk';...
1,	2,	'AHTime';...
1,	2,	'NBeat';...
10,	10,	'BeatErrPct';...
6,  8,	'HRmin';...
5,  7,  'HRmax';... 
10,	10,	'HRmean';...
10, 10, 'HRsleep';...
10,	10,	'HRRmean';...
10,	10,	'HRoff';...
10,	10,	'HRlie';...
10,	10,	'HRsit';...
10,	10,	'HRstand';...
10,	10,	'HRmove';...
10,	10,	'HRwalk';...
10,	10,	'HRrun';...
10,	10,	'HRstairs';...
10,	10,	'HRcycle';...
10,	10,	'HRrow';...
10,	10,	'HRRoff';...
10,	10,	'HRRlie';...
10,	10,	'HRRsit';...
10,	10,	'HRRstand';...
10,	10,	'HRRmove';...
10,	10,	'HRRwalk';...
10,	10,	'HRRrun';...
10,	10,	'HRRstairs';...
10,	10,	'HRRcycle';...
10,	10,	'HRRrow'};...

Kat = cat(1,kat,HRR);
